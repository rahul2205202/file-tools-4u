# cloudbuild.yaml
steps:
# Step 1: Build the container image using the Dockerfile.
# The `_RESEND_API_KEY` is securely passed as a build argument.
- name: 'gcr.io/cloud-builders/docker'
  id: Build
  args:
  - build
  - '--tag'
  - 'europe-west1-docker.pkg.dev/$_PROJECT_ID/cloud-run-source-deploy/file-tools-4u:$COMMIT_SHA'
  - '--build-arg'
  - 'RESEND_API_KEY=${_RESEND_API_KEY}'
  - '.'

# Step 2: Push the new container image to the Google Container Registry.
- name: 'gcr.io/cloud-builders/docker'
  id: Push
  args:
  - push
  - 'europe-west1-docker.pkg.dev/$_PROJECT_ID/cloud-run-source-deploy/file-tools-4u:$COMMIT_SHA'

# Step 3: Deploy the new image to Cloud Run.
# This step uses the Cloud Run service account to retrieve the secret at runtime.
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: Deploy
  entrypoint: gcloud
  args:
  - run
  - services
  - update
  - file-tools-4u
  - '--platform=managed'
  - '--region=europe-west1'
  - '--image=europe-west1-docker.pkg.dev/$_PROJECT_ID/cloud-run-source-deploy/file-tools-4u:$COMMIT_SHA'
  - '--set-secrets=RESEND_API_KEY=resend-api-key:latest,GEMINI_API_KEY=gemini-keys:latest'
  - '--allow-unauthenticated' # Or configure this as needed

images:
- 'europe-west1-docker.pkg.dev/$_PROJECT_ID/cloud-run-source-deploy/file-tools-4u:$COMMIT_SHA'

# This section tells Cloud Build where to get the secret values.
# The `resend-api-key` from Secret Manager is made available to the build step
# via the `_RESEND_API_KEY` environment variable.
availableSecrets:
  secretManager:
  - versionName: projects/$_PROJECT_ID/secrets/resend-api-key/versions/latest
    env: '_RESEND_API_KEY'